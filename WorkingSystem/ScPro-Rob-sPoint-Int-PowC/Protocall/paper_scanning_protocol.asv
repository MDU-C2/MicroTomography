% This is a scanning protocol as mentioned in the journal 
% "Surface Estimation for Microwave Imaging"
% Link to the journal : 
% https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5539471/
%=========================================================================%

% The algoritm should know the coordinate of the center of the hole in the 
% table and The diameter of the whole. 

% The function work in the coordinate system that have the hole center as
% origo and 

hole_diameter = 200 ; %CM 
epsilon = 100;
% it assumes a cylindrical boundary box arround the table hole. 
% The cylindrical boundary center matches the hole in the table and have
% the same diameter. 
% The maximum heigh is assumed to be 20 cm 
boundary_height = 200;



% Heights for scanning points 

z_step_size = 5; % Height slice step size

num_z_step = (boundary_height)/(z_step_size); % number of steps 

% Z of all scanning heights
Z = linspace(0,-boundary_height, num_z_step+1);

% Make it better later
azimuth = (pi.*linspace(0,360-18,21))./180 ;

R_epsi = hole_diameter/2 + epsilon;

points = zeros(length(Z),6,length(azimyth));

fig = figure; 
axis = axes;
hold(axis, "on")

for i = 1:length(azimuth)
 
    for j = 1:length(Z)
        % Create coordinate in base space
        point_c_space(:,1) = R_epsi.*cos(azimuth(i));
        point_c_space(:,2) = R_epsi.*sin(azimuth(i));
        point_c_space(:,3) = Z(j);

        % Create Homogeneous Transformations with orientation
        HT = se3(roty(90)*rotx(rad2deg(-azimuth(i))),point_c_space);

        points() = [j,HT.trvec tform2eul(HT.tform)]
        
        % Convert to position and roll pith yaw
        scan_pos = [HT.trvec, tform2eul(HT.tform)];
        
        points = [points;scan_pos];
    end

end
%%
scan_points = create_scan_points(200,200,100,5);
%% Open connection 
tcp_con = tcpclient('192.168.125.1',55000);
%..... From GUI Functions


%% Generate simulated data
clear all 
close all 
clc

boundary_height = 200;
% Heights for scanning points 
z_step_size = 5; % Height slice step size
num_z_step = (boundary_height)/(z_step_size); % number of steps 
% Z of all scanning heights
Z = linspace(-z_step_size,-boundary_height, num_z_step);
% Make it better later
azimuth = (pi.*linspace(0,360-18,21))./180 ;


points = zeros(num_z_step,3,length(azimuth));


for i = 1:length(azimuth)
    for j = 1:length(Z)
        Radius = sqrt( (Z(j)+200)/0.02 ); 
        % Create coordinate in base space
        points(j,1,i) = Radius.*cos(azimuth(i));
        points(j,2,i) = Radius.*sin(azimuth(i));
        points(j,3,i) = Z(j);

    end
end

figure;hold on;
for i = 1:length(azimuth)
    scatter3(points(:,1,i),points(:,2,i),points(:,3,i))
end

%% Interpolate spline from data 
i = 1;
order = 3;

cell_array = num2cell(points(:,1:2,i))


spl2 = spap2(optknt(points(:,1:2,i),order), num2cell(points(:,1:2,i)), points(:,3,i));
fnplt(spl2,'b',2);
% axis([-1 7 -1.2 1.2])
% hold on
% plot(x,noisy_y,'x')
% hold off


%% extract spline intersection with every Z



%% interpolate in a ellipse 



%% uniformly resample from ellipse 



%% Scanning protocol 

% For all points in protocol 
    % Create point                              ===Done
    % Send it to Yumi                           ===Done
    % Read from Yumi                            === Done
    % Read from sensor                          === Done
    % Convert yumi pos and sensor value to (x,y,z) in cartezian space == ? 

% interpolate points to get splines             == ToDo Victor
% Find intersection between splines and planes  == ToDo Victor
% Interpolate intersection points to eclipse    == ToDo Victor
% Uniformaly resample the shape                 == ToDo Victor
% Crust Algorithm                               == Todo Jonathan 
% Return Surface 



%% 


