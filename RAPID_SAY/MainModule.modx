MODULE MainModule
    ! Breast user frame. If the position of the OUS changes, the USER FRAME needs to change
    TASK PERS wobjdata wBreast:=[FALSE,TRUE,"",[[144.72,0,625],[1,0,0,0]],[[0,0,0],[1,0,0,0]]];

    ! t_tool is set to one of the two tools: treciever or tLaser. If the design of the tools changes, the data of the tools needs to change
    TASK PERS tooldata treciever:=[TRUE,[[-16,16,177.76],[1,0,0,0]],[0.3,[0,0,1],[1,0,0,0],0,0,0]];
    TASK Pers tooldata tLaser:=[TRUE,[[-16,-14,105.5],[1,0,0,0]],[0.3,[0,0,1],[1,0,0,0],0,0,0]];
    TASK pers tooldata t_tool:=[TRUE,[[-16,16,177.76],[1,0,0,0]],[0.3,[0,0,1],[1,0,0,0],0,0,0]];

    ! Communication:
    VAR socketdev server;
    VAR socketdev client;
    VAR string coord;

    ! Current position of tool center point:
    VAR robtarget posCurrent;

    ! Default start position:
    PERS robtarget robPos:=[[-200,0,0],[1,0,0,0],[0,0,0,4],[88.9788,9E+09,9E+09,9E+09,9E+09,9E+09]];

    ! Moving speed:
    VAR speeddata vSpeed:=[100,30,200,15];

    ! The height in z the robot will move around the OUS:
    VAR num standardMovingHeight:=-100;
    ! The distance the tool (the TCP of the tool) will have from the middle of OUS, while moving around it:
    VAR num standardDist:=90;

    PROC main()
        
        VAR robtarget pPos:=[[-202.30,-387.72,-666.99],[1.63949E-06,-0.717113,-0.696957,1.63787E-06],[0,-1,1,4],[-101.682,9E+09,9E+09,9E+09,9E+09,9E+09]];
        
        
		MoveL pPos, v50, z50, treciever\WObj:=wBreast;
        MoveL reltool(pPos,0,0,5), v20, z50, treciever\WObj:=wBreast;
        contactL\DesiredTorque:=0.009, reltool(pPos,0,0,40), v20, treciever\WObj:=wBreast;
        
        
    ENDPROC

    PROC mainX()
        AccSet 50,50;
        tpwrite "START";

        ConfJ\On;

        MoveToStartPosition 200; !200 is the distace from the tools TCP and the center of the OUS.

        connectmatlab;

        WHILE TRUE DO
            GetAndMoveToNewPosition;
            SendCurrentPosition;
        ENDWHILE

        SocketClose server;
    ENDPROC

    !connects the Robot with MATLAB
    PROC connectmatlab()
        SocketCreate server;
        SocketBind server,"10.132.158.88",55000;
        SocketListen server;
        SocketAccept server,client;
        VelSet 100,8000;
    ERROR
        IF ERRNO=ERR_SOCK_TIMEOUT THEN
            TPWrite "SOCK_TIMEOUT";
            RETRY;
        ELSEIF ERRNO=ERR_SOCK_CLOSED THEN
            TPWrite "SOCKET CLOSED";
            RETURN ;
        ELSE
            ! No error recovery handling
        ENDIF
    ENDPROC

    ! Moves the robot from "any" (almost any normal positions for this application) to the start position. 
    PROC MoveToStartPosition(num dist)
        VAR robtarget pPosition;
        VAR jointtarget jointpos;
        VAR num jointOne;

        pPosition:=CRobT(\Tool:=tool0\WObj:=wBreast);
        pPosition.trans.z:=standardMovingHeight;

        jointOne:=JointSpecificData(1);

        IF jointOne<-10 THEN
            IF pPosition.trans.x>0 THEN
                IF pPosition.trans.x>dist THEN
                    pPosition.trans.x:=dist;
                    MoveJ pPosition,vSpeed,z0,tool0\WObj:=wBreast;
                ENDIF
                pPosition.trans.y:=dist;
            ENDIF
            MoveJ pPosition,vSpeed,z0,tool0\WObj:=wBreast;
        ELSEIF jointOne>10 THEN
            IF pPosition.trans.x>0 THEN
                IF pPosition.trans.x>dist THEN
                    pPosition.trans.x:=dist;
                    MoveJ pPosition,vSpeed,z0,tool0\WObj:=wBreast;
                ENDIF
                pPosition.trans.y:=-dist;
            ENDIF
            MoveJ pPosition,vSpeed,z0,tool0\WObj:=wBreast;
        ENDIF

        jointpos:=CJointT();
        jointpos.robax.rax_1:=0;

        MoveAbsJ jointpos,v1000,z50,treciever;

        MoveL reltool(robPos,0,0,-50\Ry:=90),v100,fine,treciever\WObj:=wBreast;
    ENDPROC

    ! calculate new position, from the current position, with a distance (standard distance) from the breast center point. 
    ! The new position will have the same angle as the current position in the spherical coordinate system, but with the "standard distance" from the center of the OUS
    FUNC robtarget calcPosWithDistance(robtarget posisiton)
        VAR robtarget rPos;
        VAR num teta;

        teta:=calcTeta(posisiton);
        rPos:=posisiton;

        rPos.trans.x:=standardDist*cos(teta);
        rPos.trans.y:=standardDist*sin(teta);

        IF posisiton.trans.x<0 THEN
            rPos.trans.x:=-rPos.trans.x;
            rPos.trans.y:=-rPos.trans.y;
        ENDIF

        RETURN rPos;
    ENDFUNC

    ! calculate the angle of the position in the spherical coordinate system 
    FUNC num calcAngle(robtarget posisiton)
        VAR num Degree;
        Degree:=calcTeta(posisiton);
        Degree:=TetaToDegree(Degree,posisiton);
        RETURN Degree;
    ENDFUNC

    ! calculate the angle "teta". "teta" is the angel needed to calculate the x and y of the position in the circle, and also the angle we get from x and y. 
    FUNC num calcTeta(robtarget posisiton)
        if posisiton.trans.x=0 then
            return ATan(posisiton.trans.y);
        ELSE
            return ATan(posisiton.trans.y/posisiton.trans.x);
        ENDIF
    ENDFUNC

    ! Using the angle "teta" to calculate the degrees in the spherical coordinate system.
    FUNC num TetaToDegree(num teta,robtarget posisiton)
        IF posisiton.trans.y<0 THEN
            IF teta>0 THEN
                RETURN -teta;
            ELSE
                RETURN -180-teta;
            ENDIF
        ELSE
            IF teta<0 THEN
                RETURN -teta;
            ELSE
                RETURN 180-teta;
            ENDIF
        ENDIF
    ENDFUNC

    ! Using the degrees in the spherical coordinate system to calculate "teta". "teta" is the angel needed to calculate the x and y of the position in the circle, and also the angle we get from x and y. 
    FUNC num degreeToTeta(num degree)
        VAR num teta;

        IF degree<-90 THEN
            teta:=-(-180-degree);
        ELSEIF degree<90 THEN
            teta:=-degree;
        ELSE
            teta:=-(180-degree);
        ENDIF

        RETURN teta;
    ENDFUNC

    !This Proc will receive a position from MATLAB, and move to that position
    PROC GetAndMoveToNewPosition()
        VAR bool ok;
        VAR pos trans;
        VAR string rString;
        VAR num R{3,3};

        rString:=receive();
        ok:=StrToVal(rString,R);

        trans.x:=R{1,1};
        trans.y:=R{1,2};
        trans.z:=R{1,3};

        IF R{2,3}=-180 R{2,3}:=180;

        IF R{3,1}=1 THEN
            t_tool:=tLaser;
        ELSE
            t_tool:=tReciever;
        ENDIF

        move trans,R{2,1},R{2,2},R{2,3};
    ENDPROC

    ! This Proc will send the current position of the tool to MATLAB
    PROC SendCurrentPosition()
        VAR string stat;
        VAR num angle{3};
        VAR num R{2,3};

        posCurrent:=CRobT(\WObj:=wBreast);
        angle:=[EulerZYX(\X,posCurrent.rot),EulerZYX(\Y,posCurrent.rot),EulerZYX(\Z,posCurrent.rot)];

        R{1,1}:=posCurrent.trans.x;
        R{1,2}:=posCurrent.trans.y;
        R{1,3}:=posCurrent.trans.z;
        R{2,1}:=angle{1};
        R{2,2}:=angle{2};
        R{2,3}:=angle{3};

        stat:=send(valToStr(R));
    ENDPROC

    ! Send a string with the position of the tool to MATLAB
    func string Send(string c)
        SocketSend client\Str:=c;
        RETURN "";
    ERROR
        IF ERRNO=ERR_SOCK_CLOSED THEN
            TPWrite "error socket closed";
            RETRY;

        ELSEIF ERRNO=ERR_SOCK_NET_UNREACH THEN
            TPWrite "error socket uncreachable";
            RETRY;

        ELSEIF ERRNO=ERR_SOCK_NOT_CONN THEN
            TPWrite "error socket not con";
            RETRY;
        ELSEIF ERRNO=ERR_SOCK_UNSPEC THEN
            TPWrite "error unspec";
            RETRY;
        ENDIF
    ENDFUNC

    ! receive a string with the position, tool and speed from MATLAB.
    func string receive()
        coord:="";
        WHILE coord="" DO
            SocketReceive client\Str:=coord;
        ENDWHILE

        RETURN coord;
    ERROR
        IF ERRNO=ERR_SOCK_TIMEOUT THEN
            WaitTime 5;
            TRYNEXT;
        endif

    ENDFUNC

    !This Proc will move the tool from the current position, to the position decided from MATLAB.
    PROC move(pos trans,num rotx,num roty,num rotz)
        VAR robtarget tStartPos;
        VAR robtarget tDistStartPos;
        VAR robtarget tDistStartPosStandardHeight;

        VAR robtarget tGoalPos;
        VAR robtarget tDistGoalPos;
        VAR robtarget tDistGoalPosStandardHeight;

        VAR num startDegree;
        VAR num goalDegree;

        VAR num degreeStepMoveOut:=5;
        VAR num numStepMoveOut:=20;
        VAR num degreeStepMoveC:=20;
        VAR num numStepMoveC:=40;



        tGoalPos:=goalposition(trans,rotx,roty,rotz);
        goalDegree:=calcAngle(tGoalPos);


        tStartPos:=CRobT(\WObj:=wBreast);
        startDegree:=calcAngle(tStartPos);
        
        IF startDegree<-170 AND tStartPos.robconf.cf1<0 THEN
            startDegree:=startDegree+360;
        ELSEIF startDegree>170 AND tStartPos.robconf.cf1>0 THEN
            startDegree:=startDegree-360;
        ENDIF

        IF abs(startDegree-goalDegree)>degreeStepMoveOut OR abs(tStartPos.trans.z-tGoalPos.trans.z)>numStepMoveOut THEN
            !!Calc Start point above surface
            tDistStartPos:=calcPosWithDistance(tStartPos);

            !!Calc Start point above surface with standard height
            tDistStartPosStandardHeight:=tDistStartPos;
            tDistStartPosStandardHeight.trans.z:=standardMovingHeight;

            !!Calc Goal point above surface 
            tDistGoalPos:=calcPosWithDistance(tGoalPos);

            !!Calc Goal point above surface with standard height
            tDistGoalPosStandardHeight:=tDistGoalPos;
            tDistGoalPosStandardHeight.trans.z:=standardMovingHeight;

            !!Move to start pos above surface
            tDistStartPos.trans:=tStartPos.trans;
            MoveL tDistStartPos,vSpeed,z100,treciever\WObj:=wBreast;

                !If extra path planning is needed (dist in z or degrees in spherical coordinate system is too big): 
            IF abs(startDegree-goalDegree)>degreeStepMoveC OR abs(tStartPos.trans.z-tGoalPos.trans.z)>numStepMoveC THEN
                !!Move to start pos above surface with standard height:
                MoveL tDistStartPosStandardHeight,vSpeed,z100,treciever\WObj:=wBreast;

                !!move to position <degreeStep in degreees from goal position
                IF abs(startDegree-goalDegree)>degreeStepMoveC MoveCirc CRobT(\WObj:=wBreast),tDistGoalPos,startDegree,goalDegree,degreeStepMoveOut;

            ENDIF

            !Move to dist pos with standard height
            MoveJ reltool(reltool(tDistGoalPosStandardHeight,0,0,0\Rz:=-rotz),0,0,0\Ry:=roty),vSpeed,z100,treciever\WObj:=wBreast;

            !Move to dist pos
            MoveL reltool(reltool(tDistGoalPos,0,0,0\Rz:=-rotz),0,0,0\Ry:=roty),vSpeed,z100,treciever\WObj:=wBreast;
        ENDIF

        !move to goal position:
        MoveL reltool(reltool(tGoalPos,0,0,0\Rz:=-rotz),0,0,0\Ry:=roty),vSpeed,z100,t_tool\WObj:=wBreast;

        WaitRob\InPos;
        WaitRob\zerospeed;
        waittime 0.2;
    ENDPROC

    !This Proc creates the circle movements from one Start Position towards the Goal position. 
    !The circle will be around the OUS with a distance = standardDist. The tool will allways point to the center of the OUS.
    PROC MoveCirc(robtarget tStartPos,robtarget tDistGoalPos,num zrot,num goalDegree,num degreeStep)
        VAR robtarget pPos;
        VAR num teta;

        WHILE abs(zrot-goalDegree)>degreeStep DO
            IF zrot<goalDegree THEN
                zrot:=zrot+degreeStep;
            ELSE
                zrot:=zrot-degreeStep;
            ENDIF

            teta:=degreeToTeta(zrot);

            pPos.trans.x:=standardDist*cos(teta);
            pPos.trans.y:=standardDist*sin(teta);

            IF pPos.trans.x>0 AND abs(zrot)<90 THEN
                pPos.trans.x:=-pPos.trans.x;
                pPos.trans.y:=-pPos.trans.y;
            ELSEIF pPos.trans.x>0 AND abs(zrot)>90 THEN
                pPos.trans.y:=-pPos.trans.y;
            ENDIF

            pPos.trans.z:=standardMovingHeight;
            pPos:=goalposition(pPos.trans,0,0,zrot);

            MoveL reltool(reltool(pPos,0,0,0\Rz:=-zrot),0,0,0\Ry:=90),vSpeed,z100,treciever\WObj:=wBreast;

        ENDWHILE

    ENDPROC

    ! Goalposition = the position the robot is moving towards. 
    ! We have the trans and the root at that position, and this function create the robtarget that fits that position (conf and rotation of joint 7)
    FUNC robtarget goalposition(pos trans,num rotx,num roty,num rotz)
        VAR robtarget tpos;
        VAR num z;

        tpos.trans:=trans;
        tpos.rot:=robPos.rot;
        tpos.extax:=[90,9E+09,9E+09,9E+09,9E+09,9E+09];

        IF rotz<-135 THEN
            tpos.robconf:=[2,0,0,4];
        ELSEIF rotz<-45 THEN
            tpos.robconf:=[1,0,0,4];
        ELSEIF rotz>135 THEN
            tpos.robconf:=[-2,0,0,4];
        ELSEIF rotz>45 THEN
            tpos.robconf:=[-1,0,0,4];
        ELSE
            tpos.robconf:=[0,0,0,4];
        ENDIF

        IF rotz<90 AND rotz>0 THEN
            tpos.extax.eax_a:=90-rotz;
        ELSEIF rotz<135 AND rotz>0 THEN
            tpos.extax.eax_a:=0;
        ELSEIF rotz>134 THEN
            z:=((rotz-135)-10);
            IF z>0 THEN
                tpos.extax.eax_a:=-z;
            ELSE
                tpos.extax.eax_a:=0;
            ENDIF
        ELSEIF rotz>-90 AND rotz<0 THEN
            tpos.extax.eax_a:=90-rotz;
            IF tpos.extax.eax_a=180 tpos.extax.eax_a:=-180;
        ELSEIF rotz>-135 AND rotz<0 THEN
            tpos.extax.eax_a:=-180;
        ELSEIF rotz<-135 THEN
            z:=((abs(rotz)-135)-10);
            IF z>0 THEN
                tpos.extax.eax_a:=-z;
            ELSE
                tpos.extax.eax_a:=0;
            ENDIF
            tpos.extax.eax_a:=-180+z;
        ELSE
            tpos.extax:=robPos.extax;
        ENDIF

        RETURN tpos;
    ENDFUNC

    ! Gives back the rotation of a joint:
    FUNC num JointSpecificData(num joint)
        VAR num position;

        GetJointData\MechUnit:=ROB_1,joint\Position:=position;
        RETURN Position;
    ENDFUNC



ENDMODULE